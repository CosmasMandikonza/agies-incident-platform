[tool.poetry]
name = "aegis-incident-platform"
version = "1.0.0"
description = "Event-driven incident management platform built on AWS serverless"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/aegis-incident-platform"
repository = "https://github.com/yourusername/aegis-incident-platform"
documentation = "https://aegis-docs.example.com"
keywords = ["aws", "serverless", "incident-management", "event-driven", "lambda"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Application Frameworks"
]

[tool.poetry.dependencies]
python = "^3.11"
boto3 = "^1.34.25"
aws-lambda-powertools = {version = "^2.34.0", extras = ["all"]}
pydantic = "^2.5.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.aws-sam
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "aws_lambda_powertools.*",
    "moto.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "requires_aws: Tests that require AWS credentials"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.pylint.main]
py-version = "3.11"
ignore-patterns = ["test_.*\\.py$", "conftest\\.py$"]
jobs = 0
limit-inference-results = 100
persistent = true
suggestion-mode = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0221",  # arguments-differ
    "W0212",  # protected-access
    "W0622",  # redefined-builtin
]

[tool.pylint.reports]
output-format = "text"
reports = false
score = true

[tool.pylint.format]
max-line-length = 100

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 100
exclude = [".git", "__pycache__", "build", "dist", ".eggs", ".venv"]
ignore = ["E203", "W503", "E501"]
per-file-ignores = ["__init__.py:F401"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
    "pyproject.toml:version",
    "src/__version__.py"
]