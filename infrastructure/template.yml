AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Aegis - Event-driven incident management platform built on AWS serverless

Globals:
  Function:
    Runtime: python3.13
    MemorySize: 1024
    Timeout: 300
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: !Ref LogLevel
        POWERTOOLS_SERVICE_NAME: aegis
        POWERTOOLS_METRICS_NAMESPACE: Aegis
    Layers:
      - !Ref PowertoolsLayer
      - !Ref SharedLibrariesLayer

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
  EnableTracing:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  AlarmEmail:
    Type: String
    Description: Email address for CloudWatch alarms
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
  SlackWebhookUrl:
    Type: String
    Default: "https://hooks.slack.com/services/YOUR/SLACK/URL"
    Description: The webhook URL for Slack notifications.
  PagerDutyApiKey:
    Type: String
    Default: "YOUR_PAGERDUTY_API_KEY"
    Description: The API key for PagerDuty integration.

Conditions:
  IsProd: !Equals [!Ref Environment, prod]
  EnableTracingCondition: !Equals [!Ref EnableTracing, 'true']

Resources:
  # ===== LAYERS =====
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-powertools
      ContentUri: ../src/layers/powertools/
      CompatibleRuntimes: [python3.13]
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.13
      
  SharedLibrariesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-shared-libs
      ContentUri: ../src/layers/shared/
      CompatibleRuntimes: [python3.13]
      RetentionPolicy: Delete

  # ===== DYNAMODB & SUPPORTING TABLES =====
  IncidentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-incidents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - {AttributeName: PK, AttributeType: S}
        - {AttributeName: SK, AttributeType: S}
        - {AttributeName: GSI1PK, AttributeType: S}
        - {AttributeName: GSI1SK, AttributeType: S}
        - {AttributeName: GSI2PK, AttributeType: S}
        - {AttributeName: GSI2SK, AttributeType: S}
      KeySchema:
        - {AttributeName: PK, KeyType: HASH}
        - {AttributeName: SK, KeyType: RANGE}
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - {AttributeName: GSI1PK, KeyType: HASH}
            - {AttributeName: GSI1SK, KeyType: RANGE}
          Projection: {ProjectionType: ALL}
        - IndexName: GSI2
          KeySchema:
            - {AttributeName: GSI2PK, KeyType: HASH}
            - {AttributeName: GSI2SK, KeyType: RANGE}
          Projection: {ProjectionType: ALL}
      StreamSpecification: {StreamViewType: NEW_AND_OLD_IMAGES}
      PointInTimeRecoverySpecification: {PointInTimeRecoveryEnabled: !If [IsProd, true, false]}
      SSESpecification: {SSEEnabled: true}
      TimeToLiveSpecification: {AttributeName: ttl, Enabled: true}

  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-idempotency
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: [{AttributeName: id, AttributeType: S}]
      KeySchema: [{AttributeName: id, KeyType: HASH}]
      TimeToLiveSpecification: {AttributeName: expiration, Enabled: true}
      SSESpecification: {SSEEnabled: true}

  # ===== SQS, SNS, EventBridge =====
  AegisEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-event-bus

  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-notifications
      VisibilityTimeout: 360
      RedrivePolicy: {deadLetterTargetArn: !GetAtt NotificationDLQ.Arn, maxReceiveCount: 3}

  NotificationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-notifications-dlq

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-alarms
      Subscription:
        - {Endpoint: !Ref AlarmEmail, Protocol: email}

  # ===== API GATEWAY & COGNITO =====
  IncidentApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Environment
      TracingEnabled: !If [EnableTracingCondition, true, false]
      Cors: {AllowMethods: "'*'", AllowHeaders: "'*'", AllowOrigin: "'*'"}
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-users
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy: {MinimumLength: 8, RequireUppercase: true, RequireLowercase: true, RequireNumbers: true, RequireSymbols: true}

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-web-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows: [ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH]

  # ===== LAMBDA FUNCTIONS =====
  IncidentIngestorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/incident_ingestor/
      Handler: app.handler
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref AegisEventBus
          TABLE_NAME: !Ref IncidentsTable
      Policies:
        - EventBridgePutEventsPolicy: {EventBusName: !Ref AegisEventBus}
        - DynamoDBCrudPolicy: {TableName: !Ref IncidentsTable}
      Events:
        ApiEvent:
          Type: Api
          Properties: {RestApiId: !Ref IncidentApi, Path: /incidents, Method: POST}
        CloudWatchAlarm:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source: ["aws.cloudwatch"]
              detail-type: ["CloudWatch Alarm State Change"]

  NotificationDispatcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/notification_dispatcher/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref IncidentsTable
          IDEMPOTENCY_TABLE_NAME: !Ref IdempotencyTable
          NOTIFICATION_SECRETS_ARN: !Ref NotificationSecrets
      Policies:
        - DynamoDBCrudPolicy: {TableName: !Ref IncidentsTable}
        - DynamoDBCrudPolicy: {TableName: !Ref IdempotencyTable}
        - SecretsManagerGetSecretValuePolicy: {SecretId: !Ref NotificationSecrets}
      Events:
        NotificationQueueEvent:
          Type: SQS
          Properties: {Queue: !GetAtt NotificationQueue.Arn, BatchSize: 10}

  GenAIScribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/genai_scribe/
      Handler: app.handler
      MemorySize: 2048
      Environment:
        Variables:
          TABLE_NAME: !Ref IncidentsTable
          EVENT_BUS_NAME: !Ref AegisEventBus
          BEDROCK_MODEL_ID: "anthropic.claude-3-sonnet-20240229-v1:0"
      Policies:
        - DynamoDBCrudPolicy: {TableName: !Ref IncidentsTable}
        - EventBridgePutEventsPolicy: {EventBusName: !Ref AegisEventBus}
        - Statement:
          - Effect: Allow
            Action: bedrock:InvokeModel
            Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"

  RealtimePropagatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/realtime_propagator/
      Handler: app.handler
      Environment:
        Variables:
          APPSYNC_ENDPOINT: !GetAtt GraphQLApi.GraphQLUrl
          TABLE_NAME: !Ref IncidentsTable
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref IncidentsTable
            StreamName: !GetAtt IncidentsTable.StreamArn
        - AppSyncGraphQLApiIAMPolicy:
            GraphQLApiName: !GetAtt GraphQLApi.Name
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt IncidentsTable.StreamArn
            StartingPosition: LATEST

  TriageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/triage_function/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref IncidentsTable
          EVENT_BUS_NAME: !Ref AegisEventBus
      Policies:
        - DynamoDBCrudPolicy: {TableName: !Ref IncidentsTable}
        - EventBridgePutEventsPolicy: {EventBusName: !Ref AegisEventBus}

  ValidateInputFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/workflow_support/
      Handler: validate_input.handler
      Environment:
        Variables: {TABLE_NAME: !Ref IncidentsTable}

  CheckStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/workflow_support/
      Handler: check_status.handler
      Environment:
        Variables: {TABLE_NAME: !Ref IncidentsTable}
      Policies:
        - DynamoDBReadPolicy: {TableName: !Ref IncidentsTable}

  # ===== STEP FUNCTIONS =====
  IncidentWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-incident-workflow
      Type: STANDARD
      Tracing:
        Enabled: !If [EnableTracingCondition, true, false]
      DefinitionUri: ../infrastructure/stepfunctions/incident-workflow.asl.json
      DefinitionSubstitutions:
        TriageFunctionArn: !GetAtt TriageFunction.Arn
        GenAIScribeFunctionArn: !GetAtt GenAIScribeFunction.Arn
        ValidateInputFunctionArn: !GetAtt ValidateInputFunction.Arn
        CheckStatusFunctionArn: !GetAtt CheckStatusFunction.Arn
        NotificationQueueUrl: !Ref NotificationQueue
        CallbackQueueUrl: !Ref CallbackQueue
        AegisEventBusName: !Ref AegisEventBus
      Policies:
        - LambdaInvokePolicy: {FunctionName: !Ref TriageFunction}
        - LambdaInvokePolicy: {FunctionName: !Ref GenAIScribeFunction}
        - LambdaInvokePolicy: {FunctionName: !Ref ValidateInputFunction}
        - LambdaInvokePolicy: {FunctionName: !Ref CheckStatusFunction}
        - EventBridgePutEventsPolicy: {EventBusName: !Ref AegisEventBus}
        - SQSSendMessagePolicy: {QueueName: !GetAtt NotificationQueue.QueueName}
        - SQSSendMessagePolicy: {QueueName: !GetAtt CallbackQueue.QueueName}

  CallbackQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-callback

  # ===== APPSYNC & SECRETS =====
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-graphql
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        DefaultAction: ALLOW
        AwsRegion: !Ref AWS::Region
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      XrayEnabled: !If [EnableTracingCondition, true, false]

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: ../infrastructure/appsync/schema.graphql

  IncidentsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: IncidentsTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDataSourceRole.Arn
      DynamoDBConfig:
        TableName: !Ref IncidentsTable
        AwsRegion: !Ref AWS::Region

  AppSyncDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - {Effect: Allow, Principal: {Service: appsync.amazonaws.com}, Action: sts:AssumeRole}
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [dynamodb:GetItem, dynamodb:PutItem, dynamodb:Query, dynamodb:UpdateItem, dynamodb:DeleteItem, dynamodb:BatchGetItem, dynamodb:BatchWriteItem]
                Resource:
                  - !GetAtt IncidentsTable.Arn
                  - !Sub ${IncidentsTable.Arn}/index/*

  NotificationSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-notification-secrets
      Description: Secrets for external notification services
      SecretString: !Sub '{"slack_webhook": "${SlackWebhookUrl}", "pagerduty_api_key": "${PagerDutyApiKey}"}'

  # ===== ALARMS =====
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-high-error-rate
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: [!Ref AlarmTopic]

  DLQMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-dlq-messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt NotificationDLQ.QueueName
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: [!Ref AlarmTopic]

# Outputs
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${IncidentApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  EventBusName:
    Description: Name of the EventBridge event bus
    Value: !Ref AegisEventBus
  IncidentsTableName:
    Description: Name of the DynamoDB incidents table
    Value: !Ref IncidentsTable
  GraphQLEndpoint:
    Description: AppSync GraphQL endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient