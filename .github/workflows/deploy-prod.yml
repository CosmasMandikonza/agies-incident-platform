name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  STACK_NAME: aegis-prod
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: Validate SAM template
        run: |
          sam validate --template infrastructure/template.yaml --lint
      
      - name: Check deployment safety
        run: |
          # Add custom checks here (e.g., ensure no breaking changes)
          python scripts/check_deployment_safety.py

  deploy-backend:
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
      url: https://aegis.yourdomain.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Build Lambda Layer
        run: |
          cd infrastructure/layers
          ./build-layers.sh
      
      - name: Build SAM application
        run: |
          sam build \
            --template infrastructure/template.yaml \
            --parameter-overrides \
              Environment=prod \
              EnableTracing=true \
              LogLevel=INFO
      
      - name: Create changeset
        run: |
          sam deploy \
            --no-execute-changeset \
            --stack-name ${{ env.STACK_NAME }} \
            --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET_PROD }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              Environment=prod \
              EnableTracing=true \
              LogLevel=INFO \
              AlarmEmail=${{ secrets.ALARM_EMAIL_PROD }} \
              EnableAutoScaling=true \
              MinCapacity=2 \
              MaxCapacity=100
      
      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: prod-approvers
          minimum-approvals: 1
          issue-title: "Production deployment approval for Aegis"
          issue-body: "Please review and approve the production deployment"
      
      - name: Execute changeset
        run: |
          CHANGESET_NAME=$(aws cloudformation list-change-sets \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Summaries[0].ChangeSetName' \
            --output text)
          
          aws cloudformation execute-change-set \
            --change-set-name $CHANGESET_NAME \
            --stack-name ${{ env.STACK_NAME }}
          
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ env.STACK_NAME }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get API endpoint
        run: |
          export API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "REACT_APP_API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV
      
      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build:prod
        env:
          REACT_APP_ENVIRONMENT: production
          REACT_APP_API_ENDPOINT: ${{ env.REACT_APP_API_ENDPOINT }}
      
      - name: Deploy to S3 with cache control
        run: |
          # Deploy static assets with long cache
          aws s3 sync frontend/build/static s3://${{ secrets.FRONTEND_BUCKET_PROD }}/static \
            --cache-control "public, max-age=31536000, immutable" \
            --delete
          
          # Deploy HTML and other files with no cache
          aws s3 sync frontend/build s3://${{ secrets.FRONTEND_BUCKET_PROD }} \
            --exclude "static/*" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --delete
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/*"

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install test dependencies
        run: |
          pip install pytest requests boto3
      
      - name: Run smoke tests
        run: |
          export API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          export FRONTEND_URL=https://${{ secrets.CLOUDFRONT_DOMAIN_PROD }}
          
          pytest tests/e2e/smoke_tests.py -v \
            --api-endpoint=$API_ENDPOINT \
            --frontend-url=$FRONTEND_URL

  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Rollback stack
        run: |
          aws cloudformation cancel-update-stack \
            --stack-name ${{ env.STACK_NAME }} || true
          
          # If update is already complete, rollback to previous version
          aws cloudformation update-stack \
            --stack-name ${{ env.STACK_NAME }} \
            --use-previous-template \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed and was rolled back!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: '#aegis-alerts'
          mention: 'here'

  notify-success:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: success()
    
    steps:
      - name: Post deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment completed successfully!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: '#aegis-deployments'
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment completed.
            Commit: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
          draft: false
          prerelease: false